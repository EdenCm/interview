public class jianzhi49_GetUglyNumber {

    /**
     * 题目描述：
     * 把只包含因子2、3和5的数称作丑数（Ugly Number） 只能被2,3,5整除。
     * 例如6、8都是丑数，但14不是，因为它包含因子7。习惯上我们把1当做是第一个丑数。
     * 求按从小到大的顺序的第N个丑数。
     *
     * 【核心思想】
     *     动态规划
     * 【思路】
     *
     *     定义三个指针p2,p3,p5，p2指向的数字永远乘2，p3指向的数字永远乘3，p5指向的数字永远乘5
     *     初始化所有指针都指向第一个丑数，即1
     *     我们从2*dp[p2], 3*dp[p3], 5*dp[p5]选取最小的一个数字，作为新的丑数。这边新的丑数就是2*dp[p2]=2*1=2，然后p2++
     *     此时p3和p5指向第1个丑数，p2指向第2个丑数。然后重复上一步
     *     这里基于的一个事实是，丑数数列是递增的，当p5指针在当前位置时，后面的数乘以5必然比前面的数乘以5大，
     *     所以下一个丑数必然是先考虑前面的数乘以5。p2,p3同理，所以才可以使用指针
     *
     */
    class Solution {
        public int nthUglyNumber(int n) {
            int p2 = 0,p3=0,p5=0;// 定义三个指针
            int[] dp = new int[n];
            dp[0] = 1;
            for (int i = 1; i < n ; i++) {
                dp[i] = Math.min(dp[p2]*2,Math.min(dp[p3]*3,dp[p5]*5));
                if (dp[i] == dp[p2]*2) p2++;
                if (dp[i] == dp[p3]*3) p3++;
                if (dp[i] == dp[p5]*5) p5++;
            }
            return dp[n-1];

        }
    }
}
